Peopledata$bornUSA <- ifelse(Peopledata$bornUSA == "USA", T, F) # function to identify people born in USA- with logical statements
Battingdata <- Batting %>%
filter(yearID %in% c(1985, 2015)) # filters only two years from data set
Fieldingdata <- Fielding %>%
filter(yearID %in% c(1985, 2015))
Battingdata <- Battingdata[, colSums(is.na(Battingdata)) < 25] # discards variables where the sum of NAs in them are above 25
Fieldingdata <- Fieldingdata[, colSums(is.na(Fieldingdata)) < 25]
Battingdata <- Battingdata %>%
select(!G & !lgID & !teamID) # removing unwated variables
Fieldingdata <- Fieldingdata %>%
select(!lgID & !teamID)
Battingdata <- Battingdata %>%
mutate(batav = ifelse(H != 0, H / AB, 0)) # function to prevent NaN appearing ( division by 0)
detach("package:car", unload = TRUE)
Playerdata <- Salaries %>%
filter(yearID %in% c(1985, 2015))
Playerdata <- Salaries %>%
filter(yearID %in% c(1985, 2015))
Salaries
Playerdata <- Lahman$Salaries %>%
filter(yearID %in% c(1985, 2015))
knitr::opts_chunk$set(
comment = "",
results = "hold",
echo = TRUE,
message = FALSE,
warning = FALSE,
fig.align = "center"
)
library("tidyverse")
library("magrittr")
library("here")
library("janitor")
library("lubridate")
library("gridExtra")
library("readxl")
library("glmnet")
library("Lahman")
library("viridis")
library("lindia")
library("lme4")
library("caret")
library("pROC")
batting_data1 <- read_csv(here("data/Battingdata.csv"))
fielding_data1 <- read_csv(here("data/Fieldingdata.csv"))
people_data1 <- read_csv(here("data/Peopledata.csv"))
player_data1 <- read_csv(here("data/Playerdata.csv"))
team_data1 <- read_csv(here("data/Teamdata.csv"))
team_salaries1 <- read_csv(here("data/TeamSalaries.csv"))
on_base <- read_csv(here("data/OnBase.csv"))
Peopledata <- People %>%
select(playerID, birthYear, nameFirst, nameLast, weight, height, bats, throws, debut, birthCountry) %>%
rename(bornUSA = birthCountry)
Peopledata$bornUSA <- ifelse(Peopledata$bornUSA == "USA", T, F) # function to identify people born in USA- with logical statements
Battingdata <- Batting %>%
filter(yearID %in% c(1985, 2015)) # filters only two years from data set
Fieldingdata <- Fielding %>%
filter(yearID %in% c(1985, 2015))
Battingdata <- Battingdata[, colSums(is.na(Battingdata)) < 25] # discards variables where the sum of NAs in them are above 25
Fieldingdata <- Fieldingdata[, colSums(is.na(Fieldingdata)) < 25]
Battingdata <- Battingdata %>%
select(!G & !lgID & !teamID) # removing unwated variables
Fieldingdata <- Fieldingdata %>%
select(!lgID & !teamID)
Battingdata <- Battingdata %>%
mutate(batav = ifelse(H != 0, H / AB, 0)) # function to prevent NaN appearing ( division by 0)
sa
Playerdata <- Salaries %>%
filter(yearID %in% c(1985, 2015))
library(car)
Playerdata <- Playerdata %>%
full_join(Fieldingdata) %>%
full_join(Battingdata) %>%
full_join(Peopledata) # joining all the data sets, default joins by similar variables ie ("yearID", "playerID", "stint") where appropraiate
view(AllstarFull) # checking the data before using it
Playerdata <- Playerdata %>%
mutate(allstar = Playerdata$playerID %in% AllstarFull$playerID) # observes and determines similar names present in both data sets
Playerdata <- Playerdata %>%
mutate(age = yearID - birthYear) # simple calculation working out age
Playerdata <- Playerdata %>%
drop_na()
Playerdata <- Playerdata %>%
filter(teamID != "ANA", teamID != "FLO") %>%
droplevels()
summary(length(Playerdata$teamID)) # checking if same no. of accounts is still preserved
Teamdata <- Teams %>%
filter(yearID > 1984 & yearID <= 2016) %>% # inclusive selection of data between 1984 - 2016
full_join(team_salaries1) %>%
drop_na()
Teamdata %>%
ggplot(mapping = aes(yearID, meansalary)) +
geom_point() +
labs(x = "Year", y = "Mean Salary of Teams") +
ggtitle("Change in salary from 1984-2016") +
theme_classic() # scatter plot
Teamdata %>%
ggplot(mapping = aes(yearID, log10(meansalary))) +
geom_point() +
labs(x = "Year", y = "log10(Mean Salary of Teams)") +
ggtitle("Change in salary from 1984-2016") +
theme_classic()
linmod1 <- lm(log10(meansalary) ~ yearID, data = Teamdata) # creating linear model
summary(linmod1)
linmod1 %>%
gg_diagnose(max.per.page = 1)
pred1 <- predict(linmod1, interval = "prediction") # compute prediction bands
wsteam <- cbind(Teamdata, pred1)
ggplot(wsteam, aes(x = yearID, y = log10(meansalary), color = WSWin)) + # highlights World Series winners
geom_point(size = 1) +
geom_smooth(method = lm, color = "#2C3E50") +
geom_line(aes(y = lwr), color = 2, lty = 2) +
geom_line(aes(y = upr), color = 2, lty = 2)
Teamdata1 <- Teamdata %>%
select(yearID, meansalary, teamID) %>%
mutate(meansalary = log10(meansalary))
hist(Playerdata$R,
breaks = seq(0, max(Playerdata$R), 1)
)
hitrun <- Playerdata %>%
filter(H > 0)
hist(hitrun$R,
breaks = seq(0, max(hitrun$R), 1)
)
OnBase <- Playerdata %>%
filter(H > 0) %>%
mutate_at(
vars(yearID),
list(factor)
) # making yearID a factor
glm1 <- glm(R ~ H + yearID + POS + height + age, data = OnBase, family = "poisson")
summary(glm1)
Anova(glm1)
plot(glm1, which = 3)
abline(h = 0.8, col = 3)
OnBase %>%
ggplot(aes(x = H, y = R, color = factor(POS))) +
geom_point(
alpha = 0.7,
size = 1
)
OnBase %>%
ggplot(aes(POS, R)) +
geom_boxplot() +
geom_hline(yintercept = 2, col = "red")
glm2 <- glm(R ~ H + yearID + POS + height + age, data = OnBase[!OnBase$POS == "P", ], family = "quasipoisson") # changed to quasipoisson due to over dispersion in poison model
summary(glm2)
plot(glm2, which = 3)
abline(h = 0.8, col = 3)
OnBase_refined <- OnBase %>%
filter(!POS == "P") %>%
droplevels() # dropping Position P, it is unecessary
glm3 <- glmer(R ~ H + yearID + POS + height + age + (1|teamID), data = OnBase_refined, family = "poisson", nAGQ = 0) # removing singularities, and using a better algorithm
summary(glm3)
predict(glm1, newdata = data.frame(age = 30, height = 72, POS = "OF", teamID = "BAL" ))
predict(glm3, newdata = data.frame(age = 30, height = 72, POS = "OF", teamID = "BAL" ))
View(glm3)
View(OnBase_refined)
predict(glm1, newdata = data.frame(age = 30, height = 72, POS = "OF", teamID = "BAL" ))
predict(glm3, newdata = data.frame(age = 30, height = 72, POS = "OF", teamID = "BAL" , yearID = 2015, H = 20))
predict(glm3, newdata = data.frame(age = 30, height = 72, POS = "OF", teamID = "BAL" , yearID = "2015", H = 20))
predict(glm3, newdata = data.frame(age = 30, height = 72, POS = "OF", teamID = "BAL" , yearID = "2015", H = 20), type = "response")
batting_data1 <- read_csv(here("data/Battingdata.csv"))
fielding_data1 <- read_csv(here("data/Fieldingdata.csv"))
people_data1 <- read_csv(here("data/Peopledata.csv"))
player_data1 <- read_csv(here("data/Playerdata.csv"))
team_data1 <- read_csv(here("data/Teamdata.csv"))
team_salaries1 <- read_csv(here("data/TeamSalaries.csv"))
on_base <- read_csv(here("data/OnBase.csv"))
div_winners <- read_csv(here("data/Divwinners.csv"))
View(div_winners)
DivWinners <- Teamdata %>%
filter( c![lgID,Rank,franchID ])
DivWinners <- Teamdata %>%
filter( !c[lgID,Rank,franchID ])
DivWinners <- Teamdata %>%
filter!( c[lgID,Rank,franchID ])
DivWinners <- Teamdata %>%
select[,!c(lgID,Rank,franchID)]
DivWinners <- Teamdata %>%
select[,c(lgID,Rank,franchID)]
DivWinners <- Teamdata %>%
select!(lgID,Rank,franchID)
DivWinners <- Teamdata %>%
select(!c(lgID,Rank,franchID)
DivWinners <- Teamdata %>%
select(!c(lgID,Rank,franchID))
DivWinners <- Teamdata %>%
select(!c(lgID,Rank,franchID, divID, WCWin, LgWin, WSwin))
DivWinners <- Teamdata %>%
select(!c(lgID,Rank,franchID, divID, WCWin, LgWin, WSWin))
DivWinners <- Teamdata %>%
select(!c(2:5,lgID,Rank,franchID, divID, WCWin, LgWin, WSWin))
View(DivWinners)
DivWinners <- Teamdata %>%
select(!c(2:5,lgID,Rank,franchID, divID, WCWin, LgWin, WSWin, name, park))
DivWinners <- Teamdata %>%
select(!c(2:5,lgID,Rank,franchID, divID, WCWin, LgWin, WSWin, name, park, str_detect("teamID")))
?str_detect
DivWinners <- Teamdata %>%
select(!c(2:5,lgID,Rank,franchID, divID, WCWin, LgWin, WSWin, name, park, str_detect(DivWinners, "teamID")))
DivWinners <- Teamdata %>%
select(!c(2:5,lgID,Rank,franchID, divID, WCWin, LgWin, WSWin, name, park, str_detect(, "teamID")))
DivWinners <- Teamdata %>%
select(!c(2:5,lgID,Rank,franchID, divID, WCWin, LgWin, WSWin, name, park,teamIDBR, teamIDlahman45, teamIDretro))
DivWinners <- Teamdata %>%
select(!c(2:5,lgID,Rank,franchID, divID, WCWin, LgWin, WSWin, name, park,teamIDBR, teamIDlahman45, teamIDretro, 49))
DivWinners <- Teamdata %>%
select(!c(2:5,lgID,Rank,franchID, divID, WCWin, LgWin, WSWin, name, park,teamIDBR, teamIDlahman45, teamIDretro, ...1))
set.seed(123)
training.samples <- c(DivWinners$DivWin) %>%
createDataPartition(p = 0.8, list = F)
train.data <- DivWinners[training.samples,]
test.data <- DivWinners[-training.samples,]
divwinners <- as.vector(train.data$DivWin)
divpredict <- model.matrix(~. -DivWin)
divwinners <- as.vector(train.data$DivWin)
divpredict <- model.matrix(~. -train.data$DivWin)
divwinners <- as.vector(train.data$DivWin)
divpredict <- model.matrix(~. -train.data$DivWin,)
divwinners <- as.vector(train.data$DivWin)
divpredict <- model.matrix(~.-train.data$DivWin,)
divwinners <- as.vector(train.data$DivWin)
divpredict <- model.matrix(~.-train.data$DivWin,train.data)
View(divpredict)
View(train.data)
divwinners <- as.vector(train.data$DivWin)
divpredict <- model.matrix(~.-6,train.data)
divwinners <- as.vector(train.data$DivWin)
divpredict <- model.matrix(~.c(-6),train.data)
divwinners <- as.vector(train.data$DivWin)
divpredict <- model.matrix(~.-c(6),train.data)
divwinners <- as.vector(train.data$DivWin)
divpredict <- model.matrix(~.-train.data$DivWin,train.data)
Ames<-make_ames()
library("AmesHousing")
Ames<-make_ames()
Ames<-make_ames()
saleprices<-as.vector(Ames$Sale_Price)
Amespredict<-model.matrix(~.-1,Ames[,-c(79:81)])
Ames<-make_ames()
saleprices<-as.vector(Ames$Sale_Price)
Amespredict<-model.matrix(~.-2,Ames[,-c(79:81)])
View(Ames)
divwinners <- as.vector(train.data$DivWin)
divpredict <- model.matrix(~.-1,train.data[,-c("DivWin")])
divwinners <- as.vector(train.data$DivWin)
divpredict <- model.matrix(~.-1,train.data[,-c(DivWin)])
divwinners <- as.vector(train.data$DivWin)
divpredict <- model.matrix(~.-1,train.data[,-c(train.data$DivWin)])
divwinners <- as.vector(train.data$DivWin)
divpredict <- model.matrix(~.-1,train.data[,-DivWin])
divwinners <- as.vector(train.data$DivWin)
divpredict <- model.matrix(~.-1,train.data[,-"DivWin"])
divwinners <- as.vector(train.data$DivWin)
divpredict <- model.matrix(~.-1,train.data[,-train.data$DivWin])
divwinners <- as.vector(train.data$DivWin)
divpredict <- model.matrix(~.-1,train.data[,!c(DivWin)])
divwinners <- as.vector(train.data$DivWin)
divpredict <- model.matrix(~.-1,train.data[,-c(6)])
View(divpredict)
divwinners <- as.vector(train.data$DivWin)
divpredict <- model.matrix(~.-1,train.data[,-c(6)])
divfit <- glmnet(divpredict, divwinners)
Ames<-make_ames()
saleprices<-as.vector(Ames$Sale_Price)
Amespredict<-model.matrix(~.-1,Ames[,-c(79:81)])
Hits <- as.vector(train.data$H)
hitpredict <- model.matrix(~.-1,train.data[,-c(6)])
Hits <- as.vector(train.data$H)
hitpredict <- model.matrix(~.-1,train.data[,-c(9)])
divfit <- glmnet(hitpredict, Hits)
plot(divfit, xvar = "lambda")
divfit <- glmnet(hitpredict, Hits)
plot(divfit, xvar = "dev")
divfit
View(hitpredict)
divfit <- glmnet(hitpredict, Hits, family = "poisson")
plot(divfit, xvar = "dev")
divfit
View(train.data)
runs <- as.vector(train.data$R)
runpredict <- model.matrix(~.-1,train.data[,-c(7)])
runfit <- glmnet(runpredict, runs, family = "poisson")
plot(runfit, xvar = "dev")
runfit <- glmnet(runpredict, runs, family = "poisson")
plot(runfit, xvar = "lambda")
runfit <- glmnet(runpredict, runs)
plot(runfit, xvar = "lambda")
runfit <- glmnet(runpredict, runs)
plot(runfit, xvar = "dev")
divwinners <- as.vector(train.data$DivWin)
divpredict <- model.matrix(~.-1,train.data[,-c(6)])
divfit <- glmnet(divpredict, divwinners)
divfit <- glmnet(divpredict, divwinners, family = "poisson")
runfit
plot(runfit)
View(runpredict)
View(div_winners)
DivWinners <- Teamdata %>%
select(!c(2:5,lgID,Rank,franchID, divID, WCWin, LgWin, WSWin, name, park,teamIDBR, teamIDlahman45, teamIDretro, ...1))
set.seed(123)
training.samples <- c(DivWinners$DivWin) %>%
createDataPartition(p = 0.8, list = F)
train.data <- DivWinners[training.samples,]
test.data <- DivWinners[-training.samples,]
runs <- as.vector(train.data$R)
runpredict <- model.matrix(~.-1,train.data[,-c(7)])
runfit <- glmnet(runpredict, runs)
plot(runfit, xvar = "dev")
runfit <- glmnet(runpredict, runs)
plot(runfit, xvar = "dev")
plot(runfit, xvar = "lambda")
runfit <- glmnet(runpredict, runs, family = "poisson")
plot(runfit, xvar = "dev")
plot(runfit, xvar = "lambda")
runfit <- glmnet(runpredict, runs, family = "quasipoisson")
runfit <- glmnet(runpredict, runs, family = "multinomial")
runfit <- glmnet(runpredict, runs, family = "poisson")
plot(runfit, xvar = "dev")
plot(runfit, xvar = "lambda")
runfit
garagecars<-as.vector(Ames2$Garage_Cars)
Ames2<-Ames[Ames$Lot_Area<30000,]
Ames2<-Ames2[!(Ames2$MS_Zoning %in% c("A_agr","C_all","I_all")),]
Ames2$MS_Zoning<-droplevels(Ames2$MS_Zoning)
garagecars<-as.vector(Ames2$Garage_Cars)
Amespredict<-model.matrix(~.-1,Ames2[,-c(60,80:81)])
garagefit<-glmnet(Amespredict,garagecars,family="poisson")
plot(garagefit,xvar = "lambda")
plot(garagefit,xvar = "dev")
garagefit
runfit
runfit <- glmnet(runpredict, runs)
plot(runfit, xvar = "dev")
plot(runfit, xvar = "lambda")
runs <- as.vector(train.data$R)
runpredict <- model.matrix(~.-1,train.data[,-c(7)])
runfit <- glmnet(runpredict, runs)
plot(runfit, xvar = "dev")
plot(runfit, xvar = "lambda")
runfit
runfit
runs9<-coef(runfit, s=20.900)
runs9@Dimnames[[1]][1+runs9@i]
ames9<-coef(garagefit, s=0.04524)
ames9@Dimnames[[1]][1+ames9@i]
garagefit
runfit <- glmnet(runpredict, runs, family = "gaussian")
plot(runfit, xvar = "dev")
plot(runfit, xvar = "lambda")
runfit
runfit <- glmnet(runpredict, runs, family = "poisson")
plot(runfit, xvar = "dev")
plot(runfit, xvar = "lambda")
runfit
set.seed(123)
runscv<-cv.glmnet(runpredict,runs)
plot(runscv)
runs99<-coef(amesfit,s=runscv$lambda.1se)
runs99<-coef(runfit,s=runscv$lambda.1se)
setdiff(runs99@Dimnames[[1]][1+runs99@i],runs9@Dimnames[[1]][1+runs9@
i])
runsmax<-coef(runfit,s=runscv$lambda.min)
runsmax@Dimnames[[1]][1+runsmax@i]
set.seed(123)
runscv<-cv.glmnet(runpredict,runs)
plot(runscv)
train.model <- lmer(R ~ H+HR+BB+ yearID + W + L + X2B + X3B + SB + HBP + SF + ERA + SHO + SV + IPouts + HRA + SOA + FP + attendance + BPF + rostersize, data = train.data)
runsmax<-coef(runfit,s=runscv$lambda.min)
runsmax@Dimnames[[1]][1+runsmax@i]
train.model <- lmer(R ~ H+HR+BB+ yearID + W + L + X2B + X3B + SB + HBP + SF + ERA + SHO + SV + IPouts + HRA + SOA + FP + attendance + BPF + rostersize +(1|meansalary + (1|X2B) + (1|X3B)), data = train.data)
train.model <- lmer(R ~ H+HR+BB+ yearID + W + L + X2B + X3B + SB + HBP + SF + ERA + SHO + SV + IPouts + HRA + SOA + FP + attendance + BPF + rostersize +(1|meansalary) + (1|X2B) + (1|X3B)), data = train.data)
train.model <- lmer(R ~ H+HR+BB+ yearID + W + L + X2B + X3B + SB + HBP + SF + ERA + SHO + SV + IPouts + HRA + SOA + FP + attendance + BPF + rostersize +(1|meansalary) + (1|X2B) + (1|X3B), data = train.data)
train.model <- lmer(R ~ H+HR+BB+ yearID + W + L + SB + HBP + SF + ERA + SHO + SV + IPouts + HRA + SOA + FP + attendance + BPF + rostersize + + (1|X2B) + (1|X3B), data = train.data)
predictions <- train.model %>%
predict(test.data)
predictions <- train.model %>%
predict(test.data)
train.model <- lmer(R ~ H+HR+BB+ yearID + W + L + SB + HBP + SF + ERA + SHO + SV + IPouts + HRA + SOA + FP + attendance + BPF + rostersize + + (1|X2B) + (1|X3B), data = train.data)
predictions <- train.model %>%  predict(test.data)
rsq.lmm(train.model)
set.seed(123)
training.samples <- c(DivWinners$DivWin) %>% # dividing data
createDataPartition(p = 0.8, list = F)
train.data <- DivWinners[training.samples,]
test.data <- DivWinners[-training.samples,]
View(test.data)
library(rsq)
rsq.lmm(train.model)
amescv<-cv.glmnet(Amespredict,garagecars,family="poisson")
plot(amescv)
train.model <- lmer(R ~ H + HR+ BB + yearID + W + L + SB + HBP + SF + ERA + SHO + SV + IPouts + HRA + SOA + FP + attendance + BPF + rostersize + X2B+ X3B, data = train.data)
train.model <- lmer(R ~ H + HR+ BB + yearID + W + L + SB + HBP + SF + ERA + SHO + SV + IPouts + HRA + SOA + FP + attendance + BPF + rostersize + X2B+ X3B+ (1|DivWin), data = train.data)
rsq.lmm(train.model)
predictions <- train.model %>%  predict(test.data)
data.frame( R2 = R2(predictions, test.data$R),
RMSE = RMSE(predictions, test.data$R),
MAE = MAE(predictions, test.data$R))
predictions <- train.model %>%  predict(test.data)
data.frame( R2 = R2(predictions, test.data$R),
RMSE = RMSE(predictions, test.data$R),
MAE = MAE(predictions, test.data$R))
sqrt(0.9547422)
sqrt(0.9547422)
library(rsq)
rsq.lmm(train.model)
sqrt(0.9547422)
predtrain<-predict(train.model,type="response")
predtrain<-predict(train.model,type="response")
predtest<-predict(train.model,newdata=test.data,type="response")
train.model <- lmer(R ~ H + HR+ BB + yearID + W + L + SB + HBP + SF + ERA + SHO + SV + IPouts + HRA + SOA + FP + attendance + BPF + rostersize + X2B+ X3B+ (1|DivWin), data = train.data)
roctrain <- roc(response = train.data$R, predictor = predtrain, plot= T, main = "ROC Curve for prediction of Runs", auc = T)
roctrain <- roc(response = train.data$R, predictor = predtrain, plot= T, main = "ROC Curve for prediction of Runs", auc = T)
roc(response = test.data$R, predictor = predtest, plot = T, auc = T, add = T, col = 2)
legend(0,0.4, legend = c("training", "testing"), fill = 1:2)
youdenrun<-coords(roctrain,"b",best.method="youden",transpose=TRUE)
youdenrun
youdenrun[2]+youdenrun[3]
youdenrun<-coords(roctrain,"b",best.method="youden",transpose=TRUE)
youdenrun
youdenrun[2]+youdenrun[3]
roctrain$auc
train.model <- lmer(R ~ H + HR+ BB + yearID + W + L + SB + HBP + SF + ERA + SHO + SV + IPouts + HRA + SOA + FP + attendance + BPF + rostersize + X2B+ X3B+ (1|DivWin), data = train.data)
predtrain<-predict(train.model,type="response")
predtest<-predict(train.model,newdata=test.data,type="response")
predictions <- train.model %>%  predict(test.data)
data.frame( R2 = R2(predictions, test.data$R),
RMSE = RMSE(predictions, test.data$R),
MAE = MAE(predictions, test.data$R))
roctrain <- roc(response = train.data$R, predictor = predtrain, plot= T, main = "ROC Curve for prediction of Runs", auc = T)
roc(response = test.data$R, predictor = predtest, plot = T, auc = T, add = T, col = 2)
legend(0,0.4, legend = c("training", "testing"), fill = 1:2)
youdenrun<-coords(roctrain,"b",best.method="youden",transpose=TRUE)
youdenrun
youdenrun[2]+youdenrun[3]
roctrain$auc
tab1<-table(test.data$R,predict(train.model))
summary(train.model)
train.model <- lmer(R ~ H + HR+ BB + yearID + W + L + SB + HBP + SF + ERA + SHO + SV + IPouts + HRA + SOA + FP + attendance + BPF + rostersize + X2B+ X3B+ (1|DivWin), data = train.data, family = "poisson")
train.model <- lmer(R ~ H + HR+ BB + yearID + W + L + SB + HBP + SF + ERA + SHO + SV + IPouts + HRA + SOA + FP + attendance + BPF + rostersize + X2B+ X3B+ (1|DivWin), data = train.data, response = "poisson")
train.model <- lmer(R ~ H + HR+ BB + yearID + W + L + SB + HBP + SF + ERA + SHO + SV + IPouts + HRA + SOA + FP + attendance + BPF + rostersize + X2B+ X3B+ (1|DivWin), data = train.data, nAGQ = 0)
train.model <- lmer(R ~ H + HR+ BB + yearID + W + L + SB + HBP + SF + ERA + SHO + SV + IPouts + HRA + SOA + FP + attendance + BPF + rostersize + X2B+ X3B+ (1|DivWin), data = train.data)
predtrain<-predict(train.model,type="response" , nAGQ = 0)
predtest<-predict(train.model,newdata=test.data,type="response")
predictions <- train.model %>%  predict(test.data)
data.frame( R2 = R2(predictions, test.data$R),
RMSE = RMSE(predictions, test.data$R),
MAE = MAE(predictions, test.data$R))
roctrain <- roc(response = train.data$R, predictor = predtrain, plot= T, main = "ROC Curve for prediction of Runs", auc = T)
roc(response = test.data$R, predictor = predtest, plot = T, auc = T, add = T, col = 2)
legend(0,0.4, legend = c("training", "testing"), fill = 1:2)
youdenrun<-coords(roctrain,"b",best.method="youden",transpose=TRUE)
youdenrun
youdenrun[2]+youdenrun[3]
roctrain$auc
summary(train.model)
tab1<-table(test.data$R,predict(train.model))
DivWinners <- Teamdata %>%
select(!c(2:5,lgID,Rank,franchID, WCWin, LgWin, WSWin, name, park,teamIDBR, teamIDlahman45, teamIDretro, ...1)) # removing unwanted columns
DivWinners <- Teamdata %>%
select(!c(2:5,lgID,Rank,franchID, divID, WCWin, LgWin, WSWin, name, park,teamIDBR, teamIDlahman45, teamIDretro, ...1)) # removing unwanted columns
DivWinners2 <- Teamdata %>%
select(!c(2:5,lgID,Rank,franchID, WCWin, LgWin, WSWin, name, park,teamIDBR, teamIDlahman45, teamIDretro, ...1)) # removing unwanted columns
DivWinners2 <- Teamdata %>%
select(!c(2:5,lgID,Rank,franchID, WCWin, LgWin, WSWin, name, park,teamIDBR, teamIDlahman45, teamIDretro, ...1)) # removing unwanted columns
View(DivWinners2)
DivWinners2 <- Teamdata %>%
select(!c(2:5,lgID,Rank,franchID, WCWin, LgWin, WSWin, name, park,teamIDBR, teamIDlahman45, teamIDretro, ...1)) # removing unwanted columns
DivWinners <- Teamdata %>%
select(!c(2:5,lgID,Rank,franchID, divID, WCWin, LgWin, WSWin, name, park,teamIDBR, teamIDlahman45, teamIDretro, ...1)) # removing unwanted columns
DivWinners2 <- Teamdata %>%
select(!c(2:5,lgID,Rank,franchID, WCWin, LgWin, WSWin, name, park,teamIDBR, teamIDlahman45, teamIDretro, ...1)) # removing unwanted columns
DivWinners2 <- Teamdata %>%
select(!c(2:4,lgID,Rank,franchID, WCWin, LgWin, WSWin, name, park,teamIDBR, teamIDlahman45, teamIDretro, ...1)) # removing unwanted columns
teamSalaries <- Salaries %>%
group_by(lgID, teamID, yearID) %>%
summarise(Salary = sum(as.numeric(salary)))
detach("package:car", unload = TRUE)
teamSalaries <- Salaries %>%
group_by(lgID, teamID, yearID) %>%
summarise(Salary = sum(as.numeric(salary)))
teamSalaries <- Salaries %>%
group_by(lgID, teamID, yearID) %>%
summarise(Salary = sum(as.numeric(salary)))
library("tidyverse")
library("magrittr")
library("here")
library("janitor")
library("lubridate")
library("gridExtra")
library("readxl")
library("glmnet")
library("Lahman")
library("viridis")
library("lindia")
library("lme4")
library("caret")
library("pROC")
teamSalaries <- Salaries %>%
group_by(lgID, teamID, yearID) %>%
summarise(Salary = sum(as.numeric(salary)))
data("Salaries")
teamSalaries <- Salaries %>%
group_by(lgID, teamID, yearID) %>%
summarise(Salary = sum(as.numeric(salary)))
data("Salaries")
teamSalaries <- data("Salaries") %>%
group_by(lgID, teamID, yearID) %>%
summarise(Salary = sum(as.numeric(salary)))
teamSalaries <- data("Salaries")
# group_by(lgID, teamID, yearID) %>%
# summarise(Salary = sum(as.numeric(salary)))
